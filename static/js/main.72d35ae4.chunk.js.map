{"version":3,"sources":["Components/Cities/Cities.js","Components/Cities/index.js","Components/Spinner/index.js","Components/Spinner/Spinner.js","Components/Error/ErrorBoundary.js","Components/HOC/WithData.js","Components/Error/ErrorButton.js","Services/OWMService.js","Components/Details/index.js","Components/Details/Details.js","Components/Redux/redux.js","Components/Actions/actions.js","Components/Header/index.js","Components/Header/Header.js","Components/CurrentWeather/index.js","Components/CurrentWeather/CurrentWeather.js","Components/Forecast/Forecast.js","Components/Forecast/index.js","Services/WeatherApiService.js","Components/Hourly/Hourly.js","Components/Hourly/index.js","Components/Pages/WeatherPage.js","Components/App/App.js","Components/App/index.js","index.js"],"names":["Cities","state","cities","name","temp","weather","logo","loading","error","this","setState","elements","map","key","to","className","Component","Element","Fragment","Spinner","role","ErrorBoundary","hasError","props","children","ErrorIndicator","withData","View","getData","data","update","param","then","catch","ls","require","sleep","ms","Promise","resolve","setTimeout","OWMService","_apiBase","_apiKey","_units","getResource","storage","a","get","fetch","res","ok","Error","status","json","_incrementApiCallCount","set","getCurrentWeather","city","_transformCurrentWeather","getForecastWeather","_transformForecastWeather","getDetailWeather","_transformDetailWeather","weatherData","dt","main","temp_max","temp_min","humidity","speed","wind","icon","date","Math","round","desc","high","low","list","forecast","days","p","forEach","item","id","Date","day","getDate","hours","getHours","newItem","weatherType","weatherTypeDesc","undefined","hours2","abs","push","sys","sunrise","sunset","all","clouds","pressure","feels_like","deg","rain","description","rain1h","weatherDesc","weatherIcon","windSpeed","windDeg","count","console","warn","Details","WithData","out","el","index","d","getDay","slice","getMonth","getFullYear","getMinutes","string","charAt","toUpperCase","url","formatTime","formatDate","src","alt","capitalizeFirstLetter","degreesToDirection","WeatherService","store","createStore","theme","action","type","selectCity","setTheme","Header","CurrentWeather","Forecast","componentUpdate","weatherService","onWeatherLoaded","onError","weekday","Hourly","min","max","in_min","out_min","rainChance","height","dateValue","time","style","Number","city_name","getHourlyWeather","_transformHourlytWeather","location","current","condition","code","text","last_updated_epoch","temp_c","weatherTypeIcon","forecastData","forecastday","arr","hour","time_epoch","chance_of_rain","length","dispatch","bindActionCreators","actions","WeatherPage","withRouter","match","params","getState","App","basename","path","exact","render","component","DetailsPage","CitiesPage","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.72d35ae4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Cities.scss';\r\n\r\nexport default class Cities extends Component {\r\n\r\n    state = {\r\n        cities: [\r\n            { name: 'Moscow', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Saint Petersburg', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Novosibirsk', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Yekaterinburg', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Nizhny Novogorod', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Kazan', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Chelyabinsk', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Omsk', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Samara', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Rostov-on-Don', temp: 5, weather: 'Rain', logo: 'logo' }\r\n        ],\r\n        loading: false,\r\n        error: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { cities } = this.state;\r\n\r\n        const elements = cities.map(({ name }) => (\r\n            <Element key={name} name={name} to={`/city/${name}`} />\r\n        ));\r\n\r\n        return (\r\n            <div className=\"cities__container\">\r\n                <div className=\"cities__grid\">\r\n                    {elements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Element = ({ name }) => (\r\n    <React.Fragment>\r\n        <h2 className=\"cities__name\">\r\n            <Link to={`/city/${name}`}>{name}</Link>\r\n        </h2>\r\n        <div className=\"cities__temp\">\r\n            15\r\n        </div>\r\n    </React.Fragment>\r\n);","import Cities from './Cities';\r\n\r\nexport default Cities;","import Spinner from './Spinner';\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport './Spinner.scss'\r\n\r\nexport default class Spinner extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"spinner__container\">\r\n                <div className=\"spinner-border spinner\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport './ErrorBoundary.scss';\r\n\r\nexport class ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            hasError: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator />\r\n        }\r\n        return this.props.children;\r\n    }\r\n};\r\n\r\nconst ErrorIndicator = () => (\r\n\r\n    <div className=\"error__container\">\r\n        <span className=\"error__icon\" />\r\n        <div className=\"error__desc\"><h1>Error!</h1>Something went wrong...</div>\r\n    </div>\r\n)\r\n\r\nexport {ErrorIndicator};\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport Spinner from '../Spinner';\r\nimport {ErrorBoundary, ErrorIndicator } from '../Error';\r\n\r\nconst withData = (View, getData) => {\r\n    return class extends Component {\r\n\r\n        state = {\r\n            data: null,\r\n            loading: true,\r\n            error: false\r\n        };\r\n\r\n        componentDidMount() {\r\n            this.update();\r\n        }\r\n\r\n        update() {\r\n            this.setState({\r\n                loading: true,\r\n                error: false\r\n            });\r\n\r\n            const param = this.props.param;\r\n\r\n            getData(param)\r\n                .then((data) => {\r\n                    this.setState({\r\n                        data,\r\n                        loading: false\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    this.setState({\r\n                        error: true,\r\n                        loading: false\r\n                    });\r\n                });\r\n        }\r\n\r\n\r\n        render() {\r\n            const { data, loading, error } = this.state;\r\n\r\n            if (loading) {\r\n                return <Spinner />;\r\n            }\r\n\r\n            if (error) {\r\n                return <ErrorIndicator />;\r\n            }\r\n\r\n            return (\r\n                <ErrorBoundary>\r\n                    <View {...this.props} data={data} />\r\n                </ErrorBoundary>\r\n            );\r\n        }\r\n    };\r\n};\r\n\r\nexport default withData;\r\n","import React, { Component } from 'react';\n\nexport class ErrorButton extends Component {\n\n  state = {\n    renderError: false\n  };\n\n  render() {\n    if (this.state.renderError) {\n      this.foo.bar = 0;\n    }\n\n    return (\n      <button\n        className=\"error-button btn btn-danger btn-sm\"\n        onClick={() => this.setState({renderError: true})}>\n        Throw Error\n      </button>\n    );\n  }\n}\n","const ls = require('localstorage-ttl');\r\n\r\nconst dayMs = 24 * 60 * 60 * 1000;\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default class OWMService {\r\n\r\n    _apiBase = 'https://api.openweathermap.org/data/2.5/';\r\n    _apiKey = 'ee09c403a1b18f3bc221c981d5a7cf99';\r\n    _units = '&units=metric';\r\n\r\n    getResource = async (param, storage) => {\r\n        let data = ls.get(storage);\r\n        if (!data || false) {\r\n            const res = await fetch(`${this._apiBase}${param}&appid=${this._apiKey}`);\r\n            if (!res.ok) {\r\n                throw new Error(`Could not fetch ${param}, received ${res.status}`);\r\n            }\r\n            data = await res.json();\r\n            this._incrementApiCallCount();\r\n            ls.set(storage, data, dayMs);\r\n        }\r\n        //console.log(storage + '_dump', data);\r\n        await sleep(500);\r\n        return data;\r\n    }\r\n\r\n    getCurrentWeather = async ({ city }) => {\r\n        const data = await this.getResource(`weather?q=${city}${this._units}`, 'current_weather_openweathermap_' + city)\r\n        return this._transformCurrentWeather(data);\r\n    };\r\n\r\n    getForecastWeather = async ({ city }) => {\r\n        const data = await this.getResource(`forecast?q=${city}${this._units}`, 'forecast_weather_openweathermap' + city)\r\n        return this._transformForecastWeather(data);\r\n    };\r\n\r\n    getDetailWeather = async ({ city }) => {\r\n        const data = await this.getResource(`weather?q=${city}${this._units}`, 'detail_weather_openweathermap' + city)\r\n        return this._transformDetailWeather(data);\r\n    };\r\n\r\n    _transformCurrentWeather = (weatherData) => {\r\n        const {\r\n            dt,\r\n            name,\r\n            main: {\r\n                temp,\r\n                temp_max,\r\n                temp_min,\r\n                humidity\r\n            },\r\n            weather,\r\n            wind: {\r\n                speed\r\n            }\r\n        } = weatherData;\r\n\r\n        const { main, icon } = weather[0];\r\n        return {\r\n            name: name,\r\n            date: dt,\r\n            temp: Math.round(temp),\r\n            desc: main,\r\n            icon: icon,\r\n            high: Math.round(temp_max),\r\n            low: Math.round(temp_min),\r\n            wind: speed,\r\n            humidity: humidity\r\n        };\r\n    };\r\n\r\n    _transformForecastWeather = ({ list }) => {\r\n        const forecast = [];\r\n        const days = {};\r\n        list.forEach((item) => {\r\n            const { dt, main: { temp }, weather } = item;\r\n            const { id, main, icon } = weather[0];\r\n            const date = new Date(dt * 1000);\r\n            const day = date.getDate();\r\n            const hours = date.getHours();\r\n\r\n            const newItem = {\r\n                date: dt,\r\n                temp: Math.round(temp),\r\n                weatherType: id,\r\n                weatherTypeDesc: main,\r\n                icon: icon\r\n            };\r\n\r\n            if (days[day] !== undefined) {\r\n                const date2 = new Date(days[day].date * 1000);\r\n                const hours2 = date2.getHours();\r\n                if (Math.abs(hours - 12) < Math.abs(hours2 - 12)) {\r\n                    days[day] = newItem;\r\n                }\r\n            } else {\r\n                days[day] = newItem;\r\n            }\r\n        });\r\n        for (const p in days) {\r\n            forecast.push(days[p]);\r\n        }\r\n        return forecast;\r\n    };\r\n\r\n    _transformDetailWeather = (weatherData) => {\r\n\r\n        const {\r\n            dt,\r\n            name,\r\n            sys: {\r\n                sunrise,\r\n                sunset\r\n            },\r\n            clouds: {\r\n                all\r\n            },\r\n            main: {\r\n                temp,\r\n                temp_min,\r\n                temp_max,\r\n                pressure,\r\n                humidity,\r\n                feels_like\r\n            },\r\n            wind: {\r\n                speed,\r\n                deg\r\n            },\r\n            rain,\r\n            weather\r\n        } = weatherData;\r\n\r\n        const {\r\n            description,\r\n            icon\r\n        } = weather[0];\r\n\r\n        let rain1h = null;\r\n\r\n        if (rain !== undefined) {\r\n            rain1h = rain['1h'];\r\n        }\r\n\r\n        return {\r\n            date: dt,\r\n            city: name,\r\n            sunrise: sunrise,\r\n            sunset: sunset,\r\n            clouds: all,\r\n            weatherDesc: description,\r\n            weatherIcon: icon,\r\n            temp: Math.round(temp),\r\n            temp_min: Math.round(temp_min),\r\n            temp_max: Math.round(temp_max),\r\n            feels_like: Math.round(feels_like),\r\n            pressure: pressure,\r\n            humidity: humidity,\r\n            windSpeed: speed,\r\n            windDeg: deg,\r\n            rain1h: rain1h\r\n        };\r\n    }\r\n\r\n    _incrementApiCallCount = () => {\r\n        let count = ls.get('api-call-count');\r\n        count = count !== undefined ? count : 0;\r\n        count = count + 1;\r\n        ls.set('api-call-count', count, dayMs);\r\n        console.warn(`WARNING: API CALL, YOU ONLY HAVE 1'000 of these. Count ${count}.`);\r\n    }\r\n\r\n};\r\n\r\n\r\n// const exclude = '&exclude=alerts,minutely,hourly,daily'\r\n// const exclude = '';","import Details from './Details';\r\n\r\nexport default Details;","import React, { Component } from 'react';\r\nimport WithData from '../HOC/WithData';\r\nimport WeatherService from '../../Services/OWMService';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Details.scss';\r\n\r\nclass Details extends Component {\r\n\r\n    degreesToDirection(deg) {\r\n        const dirArr = ['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\r\n        let out = 'N';\r\n        dirArr.forEach((el, index) => {\r\n            if (deg >= (360 / 32 + 360 / 16 * index)) {\r\n                out = el;\r\n            }\r\n        });\r\n        return out;\r\n    }\r\n\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        return (weekday[d.getDay()] + \", \" + (\"0\" + d.getDate()).slice(-2)\r\n            + \".\" + (\"0\" + (d.getMonth() + 1)).slice(-2) + \".\" + d.getFullYear());\r\n    }\r\n\r\n    formatTime(date) {\r\n        const d = new Date(date * 1000);\r\n        return (d.getHours() + ':' + (\"0\" + d.getMinutes()).slice(-2));\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    render() {\r\n        const { date, city, clouds, humidity, pressure, rain1h, sunrise, sunset, temp, feels_like,\r\n            temp_max, temp_min, weatherDesc, weatherIcon, windDeg, windSpeed } = this.props.data;\r\n\r\n        let url = '/';\r\n        if (city) {\r\n            url = '/city/' + city;\r\n        }\r\n\r\n        return (\r\n            <div className=\"details__container\">\r\n                <Link className=\"details__button-back\" to={url}><i className=\"fa fa-arrow-left\" /></Link>\r\n                <div className=\"details__column\">\r\n                    <div className=\"details__city\">\r\n                        <div className=\"details__city-label\">Last updated</div>\r\n                        <div className=\"details__city-value\">{`${this.formatTime(date)} ${this.formatDate(date)}`}</div>\r\n                        <div className=\"details__city-label\">Location</div>\r\n                        <div className=\"details__city-value\">\r\n                            <Link to=\"/cities\" className=\"details__city-link\">\r\n                                <i className=\"fa fa-map-marker\" />{city}\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"details__main-container\">\r\n                        <div className=\"details__temp-group\">\r\n                            <div className=\"details__temp\">{temp}</div>\r\n                            <div className=\"details__temp-details\">\r\n                                <div className=\"details__label-temp \">Feels like</div>\r\n                                <div className=\"details__value temp\">{feels_like}</div>\r\n                                <div className=\"details__label-temp\">Min</div>\r\n                                <div className=\"details__value temp\">{temp_min}</div>\r\n                                <div className=\"details__label-temp\">Max</div>\r\n                                <div className=\"details__value temp\">{temp_max}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"details__weather-group\">\r\n                            <img\r\n                                className=\"details__weather-img\"\r\n                                src={`https://openweathermap.org/img/wn/${weatherIcon}@2x.png`} alt=\"\" />\r\n                            <div className=\"details__weather-label\">{`${this.capitalizeFirstLetter(weatherDesc)}`}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bottom__columns\">\r\n                        <div className=\"bottom__left\">\r\n                            <div className=\"bottom__col\">\r\n                                <div className=\"details__label\">Cloudness</div>\r\n                                <div className=\"details__value\">{`${clouds} %`}</div>\r\n                                <div className=\"details__label\">Humidity</div>\r\n                                <div className=\"details__value\">{`${humidity} %`}</div>\r\n                                <div className=\"details__label\">Pressure</div>\r\n                                <div className=\"details__value\">{`${pressure} hPa`}</div>\r\n                                {rain1h !== null ? <>\r\n                                    <div className=\"details__label\">Amount of rain for the last hour</div>\r\n                                    <div className=\"details__value\">{`${rain1h} mm`}</div>\r\n                                </> : null\r\n                                }\r\n                                <div className=\"details__label\">Wind Direction</div>\r\n                                <div className=\"details__value\">{`${this.degreesToDirection(windDeg)}`}</div>\r\n                                <div className=\"details__label\">Wind speed</div>\r\n                                <div className=\"details__value\">{`${windSpeed} m/s`}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bottom__right\">\r\n                            <div className=\"bottom__col\">\r\n                                <div className=\"details__label\">Sunrise time</div>\r\n                                <div className=\"details__value\">{this.formatTime(sunrise)}</div>\r\n                                <div className=\"details__label\">Sunset time</div>\r\n                                <div className=\"details__value\">{this.formatTime(sunset)}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst { getDetailWeather } = new WeatherService();\r\n\r\nexport default WithData(Details, getDetailWeather);","import { createStore } from 'redux';\r\n\r\nconst reducer = (state = {\r\n    city: 'Moscow',\r\n    theme: 'warm'\r\n},\r\n    action) => {\r\n    switch (action.type) {\r\n        case 'SELECT_CITY':\r\n            state = { ...state, city: action.city }\r\n            return state;\r\n\r\n        case 'SET_THEME':\r\n            state = { ...state, theme: action.theme }\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport { store };","\r\nexport const selectCity = (id) => {\r\n    return { type: 'SELECT_CITY', city: id };\r\n}\r\n\r\nexport const setTheme = (theme) => {\r\n    return { type: 'SET_THEME', theme: theme };\r\n}\r\n","import Header from './Header';\r\nexport default Header;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Header.scss';\r\n\r\nconst Header = ({ city, date }) => (\r\n    <div>\r\n        <div className=\"header__container\">\r\n            <h2 className=\"header__date\">{date}</h2>\r\n            <h2 className=\"header__city\">\r\n                <Link to='/cities'><i className=\"fa fa-map-marker\" />{city}</Link>\r\n            </h2>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import CurrentWeather from './CurrentWeather';\r\n\r\nexport default CurrentWeather;\r\n","import React, { Component } from 'react';\r\nimport WeatherService from '../../Services/OWMService';\r\nimport Header from '../Header';\r\nimport './CurrentWeather.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { WithData } from '../HOC';\r\n\r\n\r\nclass CurrentWeather extends Component {\r\n\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        return (weekday[d.getDay()] + \", \" + (\"0\" + d.getDate()).slice(-2)\r\n            + \".\" + (\"0\" + (d.getMonth() + 1)).slice(-2) + \".\" + d.getFullYear());\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { data: { temp }, setTheme } = this.props;\r\n        if (temp > 15) {\r\n            setTheme('hot');\r\n        } else if (temp > 5) {\r\n            setTheme('warm');\r\n        } else {\r\n            setTheme('cold');\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            date, name, temp, desc, icon, high,\r\n            low, wind, humidity\r\n        } = this.props.data;\r\n\r\n        const { city } = this.props.param;\r\n\r\n        let url = '/details';\r\n        if (city) {\r\n            url = '/details/' + city\r\n        }\r\n\r\n        return (\r\n            <div className=\"current-weather__container\">\r\n                <Header city={name} date={this.formatDate(date)} />\r\n                <div className=\"current-weather__container-inner\">\r\n                    <div className=\"current-weather__type-container\">\r\n                        <img\r\n                            className=\"current-weather__type-img\"\r\n                            src={`https://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\r\n                        <h3 className=\"current-weather__type-desc\">{desc}</h3>\r\n                    </div>\r\n                    <div className=\"current-weather__temp-container\">\r\n                        <h1 className=\"current-weather__temp\">\r\n                            {temp}\r\n                        </h1>\r\n                        <div className=\"current-weather__hilo-container\">\r\n                            <div className=\"current-weather__hilo-element\">\r\n                                <i className=\"current-weather__hilo-icon fa fa-chevron-up\" />\r\n                                <span className=\"current-weather__hilo-temp\">{high}</span>\r\n                            </div>\r\n                            <div className=\"current-weather__hilo-element\">\r\n                                <i className=\"current-weather__hilo-icon fa fa-chevron-down\" />\r\n                                <span className=\"current-weather__hilo-temp\">{low}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"current-weather__info-container\">\r\n                            <div className=\"current-weather__info\">\r\n                                <div className=\"current-weather__info-label\">\r\n                                    HUMIDITY\r\n                                </div>\r\n                                <div className=\"current-weather__info-value\">\r\n                                    {`${humidity}%`}\r\n                                </div>\r\n                                <div className=\"current-weather__info-label\">\r\n                                    WIND\r\n                                </div>\r\n                                <div className=\"current-weather__info-value\">\r\n                                    {`${wind}`}m/s\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Link to={url} className=\"khbtn current-weather__more-button\">More details</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst { getCurrentWeather } = new WeatherService();\r\n\r\nexport default WithData(CurrentWeather, getCurrentWeather);","import React, { Component } from 'react';\r\nimport WeatherService from '../../Services/OWMService';\r\nimport './Forecast.scss'\r\nimport { WithData } from '../HOC'\r\n\r\nclass Forecast extends Component {\r\n\r\n    componentUpdate = () => {\r\n        this.weatherService\r\n            .getForecastWeather(\"Moscow\")\r\n            .then(this.onWeatherLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    onWeatherLoaded = (forecast) => {\r\n        this.setState({\r\n            forecast,\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        const weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n        return {\r\n            weekday: weekday[d.getDay()],\r\n            day: (\"0\" + d.getDate()).slice(-2) + \".\" + (\"0\" + (d.getMonth() + 1)).slice(-2)\r\n        };\r\n    }\r\n\r\n    formatTemp(temp) {\r\n        if (temp > 0) {\r\n            return `+${temp}`;\r\n        } else {\r\n            return `${temp}`;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data;\r\n\r\n        return (\r\n            <div className=\"forecast__container\">\r\n                <React.Fragment>\r\n                    {data.map(({ date, temp, icon }, index) => {\r\n                        let { weekday, day } = this.formatDate(date);\r\n                        weekday = (index === 0) ? 'Today' : weekday;\r\n                        return <Element key={date} weekday={weekday} day={day} temp={temp} icon={icon} />;\r\n                    })}\r\n                </React.Fragment>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Element = ({ day, weekday, temp, icon }) => {\r\n\r\n    return <div className=\"forecast-item__container\">\r\n        <div className=\"forecast-item__date\">\r\n            {weekday}\r\n        </div>\r\n        <div className=\"forecast-item__date\">\r\n            {day}\r\n        </div>\r\n        <img src={`https://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\r\n        <div className=\"forecast-item__temp\">\r\n            {temp}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nconst { getForecastWeather } = new WeatherService();\r\n\r\nexport default WithData(Forecast, getForecastWeather);","import Forecast from './Forecast';\r\nexport default Forecast;","const ls = require('localstorage-ttl');\r\n\r\nconst dayMs = 24 * 60 * 60 * 1000;\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default class WeatherApiService {\r\n\r\n    _apiBase = 'https://api.weatherapi.com/v1/';\r\n    _apiKey = '3ad9b2d2abb245dbb8e205619202010';\r\n\r\n    getResource = async (param, storage) => {\r\n        let data = ls.get(storage);\r\n        if (!data || false) {\r\n            //'http://api.weatherapi.com/v1/forecast.json?key=3ad9b2d2abb245dbb8e205619202010&q=Moscow&days=3'\r\n            const res = await fetch(`${this._apiBase}${param}`);\r\n            if (!res.ok) {\r\n                throw new Error(`Could not fetch ${param}, received ${res.status}`);\r\n            }\r\n            data = await res.json();\r\n            this._incrementApiCallCount();\r\n            ls.set(storage, data, dayMs);\r\n        }\r\n        // console.log(storage + '_dump', data);\r\n        await sleep(500);\r\n        return data;\r\n    }\r\n\r\n    getCurrentWeather = async (city_name) => {\r\n        const data = await this.getResource(`current.json?key=${this._apiKey}&q=${city_name}&days=5`, 'current_weather_weatherapi')\r\n        return this._transformCurrentWeather(data);\r\n    };\r\n\r\n    getForecastWeather = async (city_name) => {\r\n        const data = await this.getResource(`forecast.json?key=${this._apiKey}&q=${city_name}&days=5`, 'forecast_weather_weatherapi')\r\n        return this._transformForecastWeather(data);\r\n    };\r\n\r\n    getHourlyWeather = async ({city}) => {\r\n        const data = await this.getResource(`forecast.json?key=${this._apiKey}&q=${city}&days=3`, 'hourly_weather_weatherapi_'+city)\r\n        return this._transformHourlytWeather(data);\r\n    }\r\n\r\n    _transformCurrentWeather = (weatherData) => {\r\n        const {\r\n            location: {\r\n                name,\r\n            },\r\n            current: {\r\n                condition: {\r\n                    code,\r\n                    icon,\r\n                    text\r\n                },\r\n                last_updated_epoch,\r\n                temp_c,\r\n            }\r\n        } = weatherData;\r\n        return {\r\n            name: name,\r\n            date: last_updated_epoch,\r\n            temp: Math.round(temp_c),\r\n            weatherType: code,\r\n            weatherTypeDesc: text,\r\n            weatherTypeIcon: icon,\r\n            high: Math.round(0),\r\n            low: Math.round(0)\r\n        };\r\n    };\r\n\r\n    _transformForecastWeather = (forecastData) => {\r\n        return forecastData;\r\n    };\r\n\r\n    _transformHourlytWeather = ({ forecast: { forecastday }, current: { last_updated_epoch } }) => {\r\n        const arr = [];\r\n        forecastday.forEach(({ hour }) => {\r\n            hour.forEach(({ time_epoch,time, temp_c, chance_of_rain }) => {\r\n                if (arr.length >= 24) {\r\n                    return;\r\n                }\r\n                if (time_epoch > last_updated_epoch) {\r\n                    arr.push(\r\n                        {\r\n                            date: time_epoch,\r\n                            time: time,\r\n                            temp: Math.round(temp_c),\r\n                            rainChance: chance_of_rain\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        });\r\n        return arr;\r\n    }\r\n\r\n    _incrementApiCallCount = () => {\r\n        let count = ls.get('api-call-count');\r\n        count = count !== undefined ? count : 0;\r\n        count = count + 1;\r\n        ls.set('api-call-count', count, dayMs);\r\n        console.warn(`WARNING: API CALL, YOU ONLY HAVE 1'000'000 of these. Count ${count}.`);\r\n    }\r\n\r\n};\r\n\r\n\r\n// const exclude = '&exclude=alerts,minutely,hourly,daily'\r\n// const exclude = '';","import React, { Component } from 'react';\r\nimport './Hourly.scss';\r\nimport WeatherService from '../../Services/WeatherApiService'\r\nimport ScrollContainer from 'react-indiana-drag-scroll'\r\nimport { WithData } from '../HOC';\r\n\r\nfunction map(x, in_min, in_max, out_min, out_max) {\r\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n}\r\n\r\nclass Hourly extends Component {\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        return d.getHours() + 'h';\r\n    }\r\n\r\n    render() {\r\n        const { theme, data } = this.props;\r\n\r\n        let min = 0, max = 0;\r\n        data.forEach((el) => {\r\n            min = el.temp < min ? el.temp : min;\r\n            max = el.temp > max ? el.temp : max;\r\n        });\r\n\r\n        return (\r\n            <div className=\"hourly__container\">\r\n                <React.Fragment>\r\n                    <ScrollContainer className=\"hourly__scrollcontainer\">\r\n                        <div className=\"hourly__scroll\">\r\n                            {data.map(({ temp, date, rainChance }, index) => {\r\n                                let height = map(temp, min, max, 100, 180);\r\n                                const dateValue = (index === 0) ? 'Now' : this.formatDate(date);\r\n                                return (\r\n                                    <Element\r\n                                        key={date}\r\n                                        temp={temp}\r\n                                        time={dateValue}\r\n                                        rainChance={rainChance}\r\n                                        height={height}\r\n                                        theme={theme} />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </ScrollContainer>\r\n                </React.Fragment>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Element = ({ temp, time, height, rainChance, theme }) => {\r\n    const style = {\r\n        height: `${height}px`\r\n    };\r\n    let rain = '';\r\n    if (Number(rainChance) !== 0) {\r\n        rain = (\r\n            <div className=\"hourly__rain\">\r\n                <img src={`https://openweathermap.org/img/wn/10d@2x.png`} alt=\"\" />\r\n                <span className=\"hourly__rain-percent\">{`${rainChance}%`}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"hourly__element-container\">\r\n            <div className={`hourly__element ${theme}`} style={style}>\r\n                <div className=\"hourly__element-tempgroup\">\r\n                    <div className=\"hourly__temp\">{temp}</div>\r\n                    {rain}\r\n                </div>\r\n                <div className=\"hourly__time\">{time}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst { getHourlyWeather } = new WeatherService();\r\n\r\nexport default WithData(Hourly, getHourlyWeather);","import Hourly from './Hourly';\r\nexport default Hourly;","import React from 'react'\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { store } from '../Redux';\r\nimport CurrentWeather from \"../CurrentWeather\";\r\nimport Forecast from \"../Forecast\";\r\nimport Hourly from \"../Hourly\";\r\nimport { bindActionCreators } from 'redux';\r\nimport * as actions from '../Actions';\r\n\r\nconst { dispatch } = store;\r\n\r\nconst { setTheme } = bindActionCreators(actions, dispatch);\r\n\r\n\r\nconst WeatherPage = withRouter(({ match }) => {\r\n    let { id } = match.params;\r\n    if (!id) {\r\n        id = 'Moscow';\r\n    }\r\n    const { theme } = store.getState();\r\n    return (\r\n        <div className=\"app\">\r\n            <div className={`app__top-container ${theme}`}>\r\n                <CurrentWeather param={{ city: id }} setTheme={setTheme} />\r\n                <Hourly param={{ city: id }} theme={theme} />\r\n            </div>\r\n            <div className=\"app__bottom-container\">\r\n                <Forecast param={{ city: id }} />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default WeatherPage;","import React, { Component } from 'react';\nimport Cities from '../Cities';\nimport Details from '../Details'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom';\nimport { ErrorBoundary } from '../Error';\nimport { store } from '../Redux';\nimport * as actions from '../Actions';\nimport { bindActionCreators } from 'redux';\n\nimport WeatherPage from '../Pages/WeatherPage';\n\nimport './App.scss';\n\nconst { dispatch } = store;\n\nconst { setTheme } = bindActionCreators(actions, dispatch);\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <BrowserRouter basename=\"/weather-app\">\n          <Route path=\"/\" exact render={() => (\n            <WeatherPage />\n          )} />\n          <Route path=\"/city/:id\" component={WeatherPage} />\n          <Route path=\"/cities\" render={() => (\n            <CitiesPage />\n          )} />\n          <Route path=\"/details\" exact render={() => {\n            return (\n              <DetailsPage />\n            );\n          }} />\n          <Route path=\"/details/:id\" exact render={() => {\n            return (\n              <DetailsPage />\n            );\n          }} />\n        </BrowserRouter>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst CitiesPage = () => {\n  const { city, theme } = store.getState();\n  return (\n    <div className=\"app\">\n      <div className={`app__full-container ${theme}`}>\n        <Cities />\n      </div>\n    </div>\n  );\n}\n\nconst DetailsPage = withRouter(({ match }) => {\n  let { id } = match.params;\n  if (!id) {\n    id = 'Moscow';\n  }\n  const { theme } = store.getState();\n  return (<div className=\"app\">\n    <div className={`app__full-container--grad ${theme}`}>\n      <Details param={{ city: id }} />\n    </div>\n  </div>);\n});","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './Components/Redux'\n\nconst update = () => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>\n        , document.getElementById('root'));\n}\n\nupdate();\nstore.subscribe(update);"],"sourceRoot":""}