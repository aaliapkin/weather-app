{"version":3,"sources":["Components/Error/ErrorBoundary.js","Components/HOC/Animated.js","Components/Error/ErrorButton.js","Components/Cities/Cities.js","Components/Cities/index.js","Components/Pages/CitiesPage.js","Services/OWMService.js","Components/Spinner/index.js","Components/Spinner/Spinner.js","Components/HOC/WithData.js","Components/Actions/actions.js","Components/CurrentWeather/CurrentWeather.js","Components/CurrentWeather/index.js","Components/Forecast/Forecast.js","Components/Forecast/index.js","Services/WeatherApiService.js","Components/Hourly/Hourly.js","Components/Hourly/index.js","Components/Pages/WeatherPage.js","Components/Details/Details.js","Components/Details/index.js","Components/Pages/DetailsPage.js","Components/App/index.js","Components/App/App.js","Components/Redux/redux.js","index.js"],"names":["ErrorBoundary","state","hasError","this","setState","props","children","Component","ErrorIndicator","className","Animated","WrappedComponent","didMount","setTimeout","Cities","cities","name","temp","weather","logo","loading","error","elements","map","index","key","to","Element","style","transitionDelay","console","log","Fragment","CitiesPage","ls","require","sleep","ms","Promise","resolve","OWMService","_apiBase","_apiKey","_units","getResource","param","storage","a","data","get","fetch","res","ok","Error","status","json","_incrementApiCallCount","set","getCurrentWeather","city","_transformCurrentWeather","getForecastWeather","_transformForecastWeather","getDetailWeather","_transformDetailWeather","weatherData","dt","main","temp_max","temp_min","humidity","speed","wind","icon","date","Math","round","desc","high","low","list","forecast","days","p","forEach","item","id","Date","day","getDate","hours","getHours","newItem","weatherType","weatherTypeDesc","undefined","hours2","abs","push","sys","sunrise","sunset","all","clouds","pressure","feels_like","deg","rain","description","rain1h","weatherDesc","weatherIcon","windSpeed","windDeg","count","warn","Spinner","role","withData","View","getData","update","then","catch","selectCity","type","setTheme","theme","CurrentWeather","d","getDay","slice","getMonth","getFullYear","url","formatDate","src","alt","WeatherService","connect","actions","WithData","Forecast","componentUpdate","weatherService","onWeatherLoaded","onError","weekday","Hourly","min","max","el","in_min","out_min","rainChance","height","dateValue","time","Number","getHourlyWeather","city_name","_transformHourlytWeather","location","current","condition","code","text","last_updated_epoch","temp_c","weatherTypeIcon","forecastData","forecastday","arr","hour","time_epoch","chance_of_rain","length","WeatherPage","withRouter","match","params","Details","out","getMinutes","string","charAt","toUpperCase","formatTime","capitalizeFirstLetter","degreesToDirection","DetailsPage","App","componentDidUpdate","store","getState","document","documentElement","basename","path","exact","component","createStore","action","ReactDOM","render","getElementById","subscribe"],"mappings":"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","file":"static/js/main.5e76b693.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ErrorBoundary.scss';\r\n\r\nexport class ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            hasError: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator />\r\n        }\r\n        return this.props.children;\r\n    }\r\n};\r\n\r\nconst ErrorIndicator = () => (\r\n\r\n    <div className=\"error__container\">\r\n        <span className=\"error__icon\" />\r\n        <div className=\"error__desc\"><h1>Error!</h1>Something went wrong...</div>\r\n    </div>\r\n)\r\n\r\nexport {ErrorIndicator};\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\n\r\nconst Animated = (WrappedComponent) => {\r\n    return class extends Component {\r\n        state = { didMount: false }\r\n\r\n        componentDidMount() {\r\n            setTimeout(() => {\r\n                this.setState({ didMount: true })\r\n            }, 500)\r\n        }\r\n\r\n        render() {\r\n            const { didMount } = this.state\r\n            return (\r\n                <div className={`_animate ${didMount && '_active'}`}>\r\n                    <WrappedComponent {...this.props} />\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default Animated;\r\n","import React, { Component } from 'react';\n\nexport class ErrorButton extends Component {\n\n  state = {\n    renderError: false\n  };\n\n  render() {\n    if (this.state.renderError) {\n      this.foo.bar = 0;\n    }\n\n    return (\n      <button\n        className=\"error-button btn btn-danger btn-sm\"\n        onClick={() => this.setState({renderError: true})}>\n        Throw Error\n      </button>\n    );\n  }\n}\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Animated from '../HOC/Animated';\r\nimport './Cities.scss';\r\n\r\nclass Cities extends Component {\r\n\r\n    state = {\r\n        cities: [\r\n            { name: 'Moscow', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Saint Petersburg', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Novosibirsk', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Yekaterinburg', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Nizhny Novgorod', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Kazan', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Chelyabinsk', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Omsk', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Samara', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Rostov-on-Don', temp: 5, weather: 'Rain', logo: 'logo' },\r\n            { name: 'Miami', temp: 5, weather: 'Rain', logo: 'logo' }\r\n        ],\r\n        loading: false,\r\n        error: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { cities } = this.state;\r\n\r\n        const elements = cities.map(({ name }, index) => (\r\n            <Element key={name} name={name} to={`/city/${name}`} index={index} />\r\n        ));\r\n\r\n        return (\r\n            <div className=\"cities__container\">\r\n                <div className=\"cities__grid\">\r\n                    {elements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Element = ({ name, index }) => {\r\n\r\n    const style = {\r\n        transitionDelay: `${index * 0.05}s`\r\n    };\r\n\r\n\r\n    console.log(index);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2 className=\"cities__name slide-left\" style={style}>\r\n                <Link to={`/city/${name}`}>{name}</Link>\r\n            </h2>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default Animated(Cities);","import Cities from './Cities';\r\n\r\nexport default Cities;","import React from 'react';\r\nimport Cities from '../Cities';\r\n\r\nimport './Pages.scss';\r\n\r\nconst CitiesPage = () => {\r\n    return (\r\n        <div className=\"app\">\r\n            <div className={`app__full-container`}>\r\n                <Cities />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CitiesPage;","const ls = require('localstorage-ttl');\r\n\r\nconst dayMs = 24 * 60 * 60 * 1000;\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default class OWMService {\r\n\r\n    _apiBase = 'https://api.openweathermap.org/data/2.5/';\r\n    _apiKey = 'ee09c403a1b18f3bc221c981d5a7cf99';\r\n    _units = '&units=metric';\r\n\r\n    getResource = async (param, storage) => {\r\n        let data = ls.get(storage);\r\n        if (!data || false) {\r\n            const res = await fetch(`${this._apiBase}${param}&appid=${this._apiKey}`);\r\n            if (!res.ok) {\r\n                throw new Error(`Could not fetch ${param}, received ${res.status}`);\r\n            }\r\n            data = await res.json();\r\n            this._incrementApiCallCount();\r\n            ls.set(storage, data, dayMs);\r\n        }\r\n        //console.log(storage + '_dump', data);\r\n        await sleep(1000);\r\n        return data;\r\n    }\r\n\r\n    getCurrentWeather = async ({ city }) => {\r\n        const data = await this.getResource(`weather?q=${city}${this._units}`, 'current_weather_openweathermap_' + city)\r\n        return this._transformCurrentWeather(data);\r\n    };\r\n\r\n    getForecastWeather = async ({ city }) => {\r\n        const data = await this.getResource(`forecast?q=${city}${this._units}`, 'forecast_weather_openweathermap' + city)\r\n        return this._transformForecastWeather(data);\r\n    };\r\n\r\n    getDetailWeather = async ({ city }) => {\r\n        const data = await this.getResource(`weather?q=${city}${this._units}`, 'detail_weather_openweathermap' + city)\r\n        return this._transformDetailWeather(data);\r\n    };\r\n\r\n    _transformCurrentWeather = (weatherData) => {\r\n        const {\r\n            dt,\r\n            name,\r\n            main: {\r\n                temp,\r\n                temp_max,\r\n                temp_min,\r\n                humidity\r\n            },\r\n            weather,\r\n            wind: {\r\n                speed\r\n            }\r\n        } = weatherData;\r\n\r\n        const { main, icon } = weather[0];\r\n        return {\r\n            name: name,\r\n            date: dt,\r\n            temp: Math.round(temp),\r\n            desc: main,\r\n            icon: icon,\r\n            high: Math.round(temp_max),\r\n            low: Math.round(temp_min),\r\n            wind: speed,\r\n            humidity: humidity\r\n        };\r\n    };\r\n\r\n    _transformForecastWeather = ({ list }) => {\r\n        const forecast = [];\r\n        const days = {};\r\n        list.forEach((item) => {\r\n            const { dt, main: { temp }, weather } = item;\r\n            const { id, main, icon } = weather[0];\r\n            const date = new Date(dt * 1000);\r\n            const day = date.getDate();\r\n            const hours = date.getHours();\r\n\r\n            const newItem = {\r\n                date: dt,\r\n                temp: Math.round(temp),\r\n                weatherType: id,\r\n                weatherTypeDesc: main,\r\n                icon: icon\r\n            };\r\n\r\n            if (days[day] !== undefined) {\r\n                const date2 = new Date(days[day].date * 1000);\r\n                const hours2 = date2.getHours();\r\n                if (Math.abs(hours - 12) < Math.abs(hours2 - 12)) {\r\n                    days[day] = newItem;\r\n                }\r\n            } else {\r\n                days[day] = newItem;\r\n            }\r\n        });\r\n        for (const p in days) {\r\n            forecast.push(days[p]);\r\n        }\r\n        return forecast;\r\n    };\r\n\r\n    _transformDetailWeather = (weatherData) => {\r\n\r\n        const {\r\n            dt,\r\n            name,\r\n            sys: {\r\n                sunrise,\r\n                sunset\r\n            },\r\n            clouds: {\r\n                all\r\n            },\r\n            main: {\r\n                temp,\r\n                temp_min,\r\n                temp_max,\r\n                pressure,\r\n                humidity,\r\n                feels_like\r\n            },\r\n            wind: {\r\n                speed,\r\n                deg\r\n            },\r\n            rain,\r\n            weather\r\n        } = weatherData;\r\n\r\n        const {\r\n            description,\r\n            icon\r\n        } = weather[0];\r\n\r\n        let rain1h = null;\r\n\r\n        if (rain !== undefined) {\r\n            rain1h = rain['1h'];\r\n        }\r\n\r\n        return {\r\n            date: dt,\r\n            city: name,\r\n            sunrise: sunrise,\r\n            sunset: sunset,\r\n            clouds: all,\r\n            weatherDesc: description,\r\n            weatherIcon: icon,\r\n            temp: Math.round(temp),\r\n            temp_min: Math.round(temp_min),\r\n            temp_max: Math.round(temp_max),\r\n            feels_like: Math.round(feels_like),\r\n            pressure: pressure,\r\n            humidity: humidity,\r\n            windSpeed: speed,\r\n            windDeg: deg,\r\n            rain1h: rain1h\r\n        };\r\n    }\r\n\r\n    _incrementApiCallCount = () => {\r\n        let count = ls.get('api-call-count');\r\n        count = count !== undefined ? count : 0;\r\n        count = count + 1;\r\n        ls.set('api-call-count', count, dayMs);\r\n        console.warn(`WARNING: API CALL, YOU ONLY HAVE 1'000 of these. Count ${count}.`);\r\n    }\r\n\r\n};\r\n\r\n\r\n// const exclude = '&exclude=alerts,minutely,hourly,daily'\r\n// const exclude = '';","import Spinner from './Spinner';\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport './Spinner.scss'\r\n\r\nexport default class Spinner extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"spinner__container\">\r\n                <div className=\"spinner__inner-container\">\r\n                    <div className=\"spinner-border spinner\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport Spinner from '../Spinner';\r\nimport { ErrorBoundary, ErrorIndicator } from '../Error';\r\nimport Animated from './Animated';\r\n\r\nconst withData = (View, getData) => {\r\n    return class extends Component {\r\n\r\n        state = {\r\n            data: null,\r\n            loading: true,\r\n            error: false\r\n        };\r\n\r\n        componentDidMount() {\r\n            this.update();\r\n        }\r\n\r\n        update() {\r\n            this.setState({\r\n                loading: true,\r\n                error: false\r\n            });\r\n\r\n            const param = this.props.param;\r\n\r\n            getData(param)\r\n                .then((data) => {\r\n                    this.setState({\r\n                        data,\r\n                        loading: false\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    this.setState({\r\n                        error: true,\r\n                        loading: false\r\n                    });\r\n                });\r\n        }\r\n\r\n\r\n        render() {\r\n            const { data, loading, error } = this.state;\r\n\r\n            if (loading) {\r\n                return <Spinner />;\r\n            }\r\n\r\n            if (error) {\r\n                return <ErrorIndicator />;\r\n            }\r\n\r\n            return (\r\n                <ErrorBoundary>\r\n                    <View {...this.props} data={data} />\r\n                </ErrorBoundary>\r\n            );\r\n        }\r\n    };\r\n};\r\n\r\nexport default withData;\r\n","\r\nexport const selectCity = (id) => {\r\n    return { type: 'SELECT_CITY', city: id };\r\n}\r\n\r\nexport const setTheme = (theme) => {\r\n    return { type: 'SET_THEME', theme: theme };\r\n}\r\n","import React, { Component } from 'react';\r\nimport WeatherService from '../../Services/OWMService';\r\nimport './CurrentWeather.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { WithData } from '../HOC';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../Actions'\r\nimport Animated from '../HOC/Animated';\r\n\r\n\r\nclass CurrentWeather extends Component {\r\n\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        return (weekday[d.getDay()] + \", \" + (\"0\" + d.getDate()).slice(-2)\r\n            + \".\" + (\"0\" + (d.getMonth() + 1)).slice(-2) + \".\" + d.getFullYear());\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { data: { temp }, setTheme } = this.props;\r\n        if (temp > 15) {\r\n            setTheme('hot');\r\n        } else if (temp > 5) {\r\n            setTheme('warm');\r\n        } else {\r\n            setTheme('cold');\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            date, name, temp, desc, icon, high,\r\n            low, wind, humidity\r\n        } = this.props.data;\r\n\r\n        const { city } = this.props.param;\r\n\r\n        let url = '/details';\r\n        if (city) {\r\n            url = '/details/' + city\r\n        }\r\n\r\n        return (\r\n            <div className=\"current-weather__container\">\r\n                <h2 className=\"current-weather-header__date fade-in\">{this.formatDate(date)}</h2>\r\n                <h2 className=\"current-weather-header__city fade-in\">\r\n                    <Link to='/cities'><i className=\"fa fa-map-marker\" />{city}</Link>\r\n                </h2>\r\n                <div className=\"current-weather__type-container slide-left\">\r\n                    <img\r\n                        className=\"current-weather__type-img\"\r\n                        src={`https://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\r\n                    <h3 className=\"current-weather__type-desc\">{desc}</h3>\r\n                </div>\r\n                <div className=\"current-weather__temp current-weather-temp__container\">\r\n                    <h1 className=\"current-weather-temp__temp-value rotate-in\">\r\n                        {temp}\r\n                    </h1>\r\n                    <div className=\"current-weather__hilo-container rotate-in\">\r\n                        <div className=\"current-weather__hilo-element\">\r\n                            <i className=\"current-weather__hilo-icon fa fa-chevron-up\" />\r\n                            <span className=\"current-weather__hilo-temp\">{high}</span>\r\n                        </div>\r\n                        <div className=\"current-weather__hilo-element\">\r\n                            <i className=\"current-weather__hilo-icon fa fa-chevron-down\" />\r\n                            <span className=\"current-weather__hilo-temp\">{low}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"current-weather__info current-weather-info__container slide-right\">\r\n                        <div className=\"current-weather-info__label\">\r\n                            HUMIDITY\r\n                                </div>\r\n                        <div className=\"current-weather-info__value\">\r\n                            {`${humidity}%`}\r\n                        </div>\r\n                        <div className=\"current-weather-info__label\">\r\n                            WIND\r\n                                </div>\r\n                        <div className=\"current-weather-info__value\">\r\n                            {`${wind}`}m/s\r\n                                </div>\r\n                    </div>\r\n                </div>\r\n                <Link to={url} className=\"btn current-weather__more-button slide-bottom\">More details</Link>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst { getCurrentWeather } = new WeatherService();\r\n\r\nexport default connect(null, actions)(WithData(Animated(CurrentWeather), getCurrentWeather));","import CurrentWeather from './CurrentWeather';\r\n\r\nexport default CurrentWeather;\r\n","import React, { Component } from 'react';\r\nimport WeatherService from '../../Services/OWMService';\r\nimport './Forecast.scss'\r\nimport { WithData } from '../HOC'\r\nimport Animated from '../HOC/Animated';\r\n\r\nclass Forecast extends Component {\r\n\r\n    componentUpdate = () => {\r\n        this.weatherService\r\n            .getForecastWeather(\"Moscow\")\r\n            .then(this.onWeatherLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    onWeatherLoaded = (forecast) => {\r\n        this.setState({\r\n            forecast,\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        const weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n        return {\r\n            weekday: weekday[d.getDay()],\r\n            day: (\"0\" + d.getDate()).slice(-2) + \".\" + (\"0\" + (d.getMonth() + 1)).slice(-2)\r\n        };\r\n    }\r\n\r\n    formatTemp(temp) {\r\n        if (temp > 0) {\r\n            return `+${temp}`;\r\n        } else {\r\n            return `${temp}`;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data;\r\n\r\n        return (\r\n            <div className=\"forecast__container\">\r\n                <React.Fragment>\r\n                    {data.map(({ date, temp, icon }, index) => {\r\n                        let { weekday, day } = this.formatDate(date);\r\n                        weekday = (index === 0) ? 'Today' : weekday;\r\n                        return <Element key={date} weekday={weekday} day={day} temp={temp} icon={icon} index={index} />;\r\n                    })}\r\n                </React.Fragment>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Element = ({ day, weekday, temp, icon, index }) => {\r\n\r\n    let style = {\r\n        transitionDelay: `${index * 0.1}s`\r\n    };\r\n\r\n    return <div className=\"forecast-item__container rotate-in\" style={style}>\r\n        <div className=\"forecast-item__date\">\r\n            {weekday}\r\n        </div>\r\n        <div className=\"forecast-item__date\">\r\n            {day}\r\n        </div>\r\n        <img src={`https://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\r\n        <div className=\"forecast-item__temp\">\r\n            {temp}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nconst { getForecastWeather } = new WeatherService();\r\n\r\nexport default WithData(Animated(Forecast), getForecastWeather);","import Forecast from './Forecast';\r\nexport default Forecast;","const ls = require('localstorage-ttl');\r\n\r\nconst dayMs = 24 * 60 * 60 * 1000;\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default class WeatherApiService {\r\n\r\n    _apiBase = 'https://api.weatherapi.com/v1/';\r\n    _apiKey = '3ad9b2d2abb245dbb8e205619202010';\r\n\r\n    getResource = async (param, storage) => {\r\n        let data = ls.get(storage);\r\n        if (!data || false) {\r\n            //'http://api.weatherapi.com/v1/forecast.json?key=3ad9b2d2abb245dbb8e205619202010&q=Moscow&days=3'\r\n            const res = await fetch(`${this._apiBase}${param}`);\r\n            if (!res.ok) {\r\n                throw new Error(`Could not fetch ${param}, received ${res.status}`);\r\n            }\r\n            data = await res.json();\r\n            this._incrementApiCallCount();\r\n            ls.set(storage, data, dayMs);\r\n        }\r\n        // console.log(storage + '_dump', data);\r\n        await sleep(1000);\r\n        return data;\r\n    }\r\n\r\n    getCurrentWeather = async (city_name) => {\r\n        const data = await this.getResource(`current.json?key=${this._apiKey}&q=${city_name}&days=5`, 'current_weather_weatherapi')\r\n        return this._transformCurrentWeather(data);\r\n    };\r\n\r\n    getForecastWeather = async (city_name) => {\r\n        const data = await this.getResource(`forecast.json?key=${this._apiKey}&q=${city_name}&days=5`, 'forecast_weather_weatherapi')\r\n        return this._transformForecastWeather(data);\r\n    };\r\n\r\n    getHourlyWeather = async ({ city }) => {\r\n        const data = await this.getResource(`forecast.json?key=${this._apiKey}&q=${city}&days=3`, 'hourly_weather_weatherapi_' + city)\r\n        return this._transformHourlytWeather(data);\r\n    }\r\n\r\n    _transformCurrentWeather = (weatherData) => {\r\n        const {\r\n            location: {\r\n                name,\r\n            },\r\n            current: {\r\n                condition: {\r\n                    code,\r\n                    icon,\r\n                    text\r\n                },\r\n                last_updated_epoch,\r\n                temp_c,\r\n            }\r\n        } = weatherData;\r\n        return {\r\n            name: name,\r\n            date: last_updated_epoch,\r\n            temp: Math.round(temp_c),\r\n            weatherType: code,\r\n            weatherTypeDesc: text,\r\n            weatherTypeIcon: icon,\r\n            high: Math.round(0),\r\n            low: Math.round(0)\r\n        };\r\n    };\r\n\r\n    _transformForecastWeather = (forecastData) => {\r\n        return forecastData;\r\n    };\r\n\r\n    _transformHourlytWeather = ({ forecast: { forecastday }, current: { last_updated_epoch } }) => {\r\n        const arr = [];\r\n        forecastday.forEach(({ hour }) => {\r\n            hour.forEach(({ time_epoch, time, temp_c, chance_of_rain }) => {\r\n                if (arr.length >= 24) {\r\n                    return;\r\n                }\r\n                if (time_epoch > last_updated_epoch) {\r\n                    arr.push(\r\n                        {\r\n                            date: time_epoch,\r\n                            time: time,\r\n                            temp: Math.round(temp_c),\r\n                            rainChance: chance_of_rain\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        });\r\n        return arr;\r\n    }\r\n\r\n    _incrementApiCallCount = () => {\r\n        let count = ls.get('api-call-count');\r\n        count = count !== undefined ? count : 0;\r\n        count = count + 1;\r\n        ls.set('api-call-count', count, dayMs);\r\n        console.warn(`WARNING: API CALL, YOU ONLY HAVE 1'000'000 of these. Count ${count}.`);\r\n    }\r\n\r\n};\r\n\r\n\r\n// const exclude = '&exclude=alerts,minutely,hourly,daily'\r\n// const exclude = '';","import React, { Component } from 'react';\r\nimport './Hourly.scss';\r\nimport WeatherService from '../../Services/WeatherApiService'\r\nimport ScrollContainer from 'react-indiana-drag-scroll'\r\nimport { WithData } from '../HOC';\r\nimport Animated from '../HOC/Animated';\r\n\r\nfunction map(x, in_min, in_max, out_min, out_max) {\r\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n}\r\n\r\nclass Hourly extends Component {\r\n\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        return d.getHours() + 'h';\r\n    }\r\n\r\n    render() {\r\n        const { theme, data } = this.props;\r\n\r\n        let min = 0, max = 0;\r\n        data.forEach((el) => {\r\n            min = el.temp < min ? el.temp : min;\r\n            max = el.temp > max ? el.temp : max;\r\n        });\r\n\r\n        return (\r\n            <div className=\"hourly__container\">\r\n                <React.Fragment>\r\n                    <ScrollContainer className=\"hourly__scrollcontainer\">\r\n                        <div className=\"hourly__scroll\">\r\n                            {data.map(({ temp, date, rainChance }, index) => {\r\n                                let height = map(temp, min, max, 100, 180);\r\n                                const dateValue = (index === 0) ? 'Now' : this.formatDate(date);\r\n                                return (\r\n                                    <Element\r\n                                        key={date}\r\n                                        temp={temp}\r\n                                        time={dateValue}\r\n                                        rainChance={rainChance}\r\n                                        height={height}\r\n                                        theme={theme}\r\n                                        index={index} />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </ScrollContainer>\r\n                </React.Fragment>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Element = ({ temp, time, height, rainChance, index }) => {\r\n\r\n    const style = {\r\n        height: `${height}px`,\r\n        transitionDelay: `${index * 0.05}s`\r\n    };\r\n\r\n    let rain = '';\r\n    if (Number(rainChance) !== 0) {\r\n        rain = (\r\n            <div className=\"hourly-element__rain\">\r\n                <img src={`https://openweathermap.org/img/wn/10d@2x.png`} alt=\"\" />\r\n                <span>{`${rainChance}%`}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"hourly__element-container\">\r\n            <div className='hourly-element' style={style}>\r\n                <div className=\"hourly-element__temp\">{temp}</div>\r\n                {rain}\r\n                <div className=\"hourly-element__time\">\r\n                    <span>{time}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst { getHourlyWeather } = new WeatherService();\r\n\r\nexport default WithData(Animated(Hourly), getHourlyWeather);","import Hourly from './Hourly';\r\nexport default Hourly;","import React from 'react'\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport CurrentWeather from \"../CurrentWeather\";\r\nimport Forecast from \"../Forecast\";\r\nimport Hourly from \"../Hourly\";\r\n\r\nimport './Pages.scss';\r\n\r\nconst WeatherPage = withRouter(({ match }) => {\r\n    let { id } = match.params;\r\n    if (!id) {\r\n        id = 'Moscow';\r\n    }\r\n    return (\r\n        <div className=\"app\">\r\n            <div className='app__top-container'>\r\n                <div className=\"app-top__current-wrapper\">\r\n                    <CurrentWeather param={{ city: id }} />\r\n                </div>\r\n                <div className=\"app-top__hourly-wrapper\">\r\n                    <Hourly param={{ city: id }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"app__bottom-container\">\r\n                <Forecast param={{ city: id }} />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default WeatherPage;","import React, { Component } from 'react';\r\nimport WithData from '../HOC/WithData';\r\nimport WeatherService from '../../Services/OWMService';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Details.scss';\r\nimport Animated from '../HOC/Animated';\r\n\r\nclass Details extends Component {\r\n\r\n    degreesToDirection(deg) {\r\n        const dirArr = ['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\r\n        let out = 'N';\r\n        dirArr.forEach((el, index) => {\r\n            if (deg >= (360 / 32 + 360 / 16 * index)) {\r\n                out = el;\r\n            }\r\n        });\r\n        return out;\r\n    }\r\n\r\n    formatDate(date) {\r\n        const d = new Date(date * 1000);\r\n        const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        return (weekday[d.getDay()] + \", \" + (\"0\" + d.getDate()).slice(-2)\r\n            + \".\" + (\"0\" + (d.getMonth() + 1)).slice(-2) + \".\" + d.getFullYear());\r\n    }\r\n\r\n    formatTime(date) {\r\n        const d = new Date(date * 1000);\r\n        return (d.getHours() + ':' + (\"0\" + d.getMinutes()).slice(-2));\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    render() {\r\n        const { date, city, clouds, humidity, pressure, rain1h, sunrise, sunset, temp, feels_like,\r\n            temp_max, temp_min, weatherDesc, weatherIcon, windDeg, windSpeed } = this.props.data;\r\n\r\n        let url = '/';\r\n        if (city) {\r\n            url = '/city/' + city;\r\n        }\r\n\r\n        return (\r\n            <div className=\"details__container\">\r\n                <Link className=\"details__button-back\" to={url}><i className=\"fa fa-arrow-left\" /></Link>\r\n                <div className=\"details__column fade-in\">\r\n                    <div className=\"details__city\">\r\n                        <div className=\"details__city-label\">Last updated</div>\r\n                        <div className=\"details__city-value\">{`${this.formatTime(date)} ${this.formatDate(date)}`}</div>\r\n                        <div className=\"details__city-label\">Location</div>\r\n                        <div className=\"details__city-value\">\r\n                            <Link to=\"/cities\" className=\"details__city-link\">\r\n                                <i className=\"fa fa-map-marker\" />{city}\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"details__main-container\">\r\n                        <div className=\"details__temp-group\">\r\n                            <div className=\"details__temp rotate-in\">{temp}</div>\r\n                            <div className=\"details__temp-details rotate-in\">\r\n                                <div className=\"details__label-temp \">Feels like</div>\r\n                                <div className=\"details__value temp\">{feels_like}</div>\r\n                                <div className=\"details__label-temp\">Min</div>\r\n                                <div className=\"details__value temp\">{temp_min}</div>\r\n                                <div className=\"details__label-temp\">Max</div>\r\n                                <div className=\"details__value temp\">{temp_max}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"details__weather-group slide-right\">\r\n                            <img\r\n                                className=\"details__weather-img\"\r\n                                src={`https://openweathermap.org/img/wn/${weatherIcon}@2x.png`} alt=\"\" />\r\n                            <div className=\"details__weather-label\">{`${this.capitalizeFirstLetter(weatherDesc)}`}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bottom__columns\">\r\n                        <div className=\"bottom__left\">\r\n                            <div className=\"bottom__col slide-left\">\r\n                                <div className=\"details__label\">Cloudness</div>\r\n                                <div className=\"details__value\">{`${clouds} %`}</div>\r\n                                <div className=\"details__label\">Humidity</div>\r\n                                <div className=\"details__value\">{`${humidity} %`}</div>\r\n                                <div className=\"details__label\">Pressure</div>\r\n                                <div className=\"details__value\">{`${pressure} hPa`}</div>\r\n                                {rain1h !== null ? <>\r\n                                    <div className=\"details__label\">Amount of rain for the last hour</div>\r\n                                    <div className=\"details__value\">{`${rain1h} mm`}</div>\r\n                                </> : null\r\n                                }\r\n                                <div className=\"details__label\">Wind Direction</div>\r\n                                <div className=\"details__value\">{`${this.degreesToDirection(windDeg)}`}</div>\r\n                                <div className=\"details__label\">Wind speed</div>\r\n                                <div className=\"details__value\">{`${windSpeed} m/s`}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bottom__right\">\r\n                            <div className=\"bottom__col slide-right\">\r\n                                <div className=\"details__label\">Sunrise time</div>\r\n                                <div className=\"details__value\">{this.formatTime(sunrise)}</div>\r\n                                <div className=\"details__label\">Sunset time</div>\r\n                                <div className=\"details__value\">{this.formatTime(sunset)}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst { getDetailWeather } = new WeatherService();\r\n\r\nexport default WithData(Animated(Details), getDetailWeather);","import Details from './Details';\r\n\r\nexport default Details;","\r\nimport React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Details from '../Details';\r\nimport './Pages.scss';\r\n\r\nconst DetailsPage = withRouter(({ match }) => {\r\n    let { id } = match.params;\r\n    if (!id) {\r\n        id = 'Moscow';\r\n    }\r\n    return (<div className=\"app\">\r\n        <div className='app__full-container app__full-container--grad'>\r\n            <Details param={{ city: id }} />\r\n        </div>\r\n    </div>);\r\n});\r\n\r\nexport default DetailsPage;","import App from './App';\r\n\r\nexport default App;","import React, { Component } from 'react';\n\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom';\nimport { ErrorBoundary } from '../Error';\n\nimport { WeatherPage, CitiesPage, DetailsPage } from '../Pages';\n\nexport default class App extends Component {\n\n  componentDidUpdate = () => {\n    const { theme } = this.props.store.getState();\n    switch (theme) {\n      case 'hot':\n        document.documentElement.className = 'hotTheme';\n        break;\n      case 'warm':\n        document.documentElement.className = 'warmTheme';\n        break;\n      case 'cold':\n        document.documentElement.className = 'coldTheme';\n        break;\n      default:\n        document.documentElement.className = 'warmTheme';\n        break;\n    }\n    console.log(document.documentElement.className);\n  }\n\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <BrowserRouter basename=\"/weather-app\">\n          <Route path=\"/\" exact component={WeatherPage} />\n          <Route path=\"/city/:id\" component={WeatherPage} />\n          <Route path=\"/cities\" component={CitiesPage} />\n          <Route path=\"/details\" exact component={DetailsPage} />\n          <Route path=\"/details/:id\" component={DetailsPage} />\n        </BrowserRouter>\n      </ErrorBoundary>\n    );\n  }\n}","import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n    city: 'Moscow',\r\n    theme: 'warm'\r\n};\r\n\r\nconst reducer = (state = {\r\n    city: 'Moscow',\r\n    theme: 'warm'\r\n},\r\n    action) => {\r\n    switch (action.type) {\r\n        case 'SELECT_CITY':\r\n            state = { ...state, city: action.city }\r\n            return state;\r\n\r\n        case 'SET_THEME':\r\n            state = { ...state, theme: action.theme }\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './Components/Redux'\n\nconst update = () => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <App store={store} />\n        </Provider>\n        , document.getElementById('root'));\n}\n\nupdate();\nstore.subscribe(update);"],"sourceRoot":""}